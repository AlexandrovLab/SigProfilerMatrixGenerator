import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.font_manager
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.patches as patches
import pandas as pd
import numpy as np
from matplotlib.ticker import FixedLocator, FixedFormatter
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import matplotlib.lines as lines
from sklearn.metrics.pairwise import cosine_similarity
from scipy.spatial.distance import euclidean, pdist, squareform
import seaborn as sns

plt.style.use('ggplot')
plt.rcParams['axes.facecolor'] = 'white'


def plotCNV(matrix_path, output_path, project, percentage=False, aggregate=False):
	"""Outputs a pdf containing CNV signature plots 

    :param matrix_path: path to matrix generated by 
    :param output_path: path to output pdf file containing plots
    :param project: name of project
    :param percentage: True if y-axis is displayed as percentage of CNV events, False if displayed as counts
    :param aggregate: True if counts are to be aggregated across samples to produce one plot, False otherwise

    >>> plotCNV()

    """
	def plot(counts, labels, percentage):


		super_class = ['Het', 'LOH', "Hom del"]
		het_sub_class = ['amp+', 'amp', 'gain', 'neut']
		loh_subclass = ['amp+', 'amp', 'gain', 'neut', "del"]
		hom_del_class = ['0-100kb', '100kb-1Mb', '>1Mb']
		x_labels = ['0-100kb', '100kb-1Mb', '1Mb-10Mb', '10Mb-40Mb','>40Mb']
		color_mapping = {'amp+':{'>40Mb':"deeppink", '10Mb-40Mb':"hotpink", '1Mb-10Mb':"palevioletred", '100kb-1Mb':"lightpink", '0-100kb':"lavenderblush"}, 
					 'amp':{'>40Mb':"saddlebrown", '10Mb-40Mb':"sienna", '1Mb-10Mb': "peru", '100kb-1Mb':"sandybrown", '0-100kb':"linen"}, 
					 'gain':{'>40Mb': "rebeccapurple", '10Mb-40Mb':"blueviolet", '1Mb-10Mb':"mediumorchid", '100kb-1Mb':"plum", '0-100kb':"thistle"}, 
					 'neut':{'>40Mb':"olive", '10Mb-40Mb':"olivedrab", '1Mb-10Mb':"yellowgreen", '100kb-1Mb':"lawngreen", '0-100kb':"greenyellow"}, 
					 'del':{'>40Mb':"dimgray", '10Mb-40Mb':"darkgrey", '1Mb-10Mb':"silver", '100kb-1Mb':"lightgray", '0-100kb':"whitesmoke"}}

		hom_del_color_mapping = {'0-100kb':"darkblue" , '100kb-1Mb':"mediumblue", '>1Mb':"cornflowerblue"}

	
		N=48
		ticks = np.arange(N)
		width = 0.27
		xticks = []
		i = -1 #used to distinguish first bar from the rest

		fig, ax = plt.subplots(figsize=(20,5))
		min_count = min(list(filter(lambda a: a != 0, counts)))
		print (min_count)
		for count, label in zip(counts, labels):
			assert(len(counts) == 48 and len(labels) == 48) #have to plot 48 bars 
			categories = label.split(':')
			cnv_class = categories[0]
			size_class = categories[2]
			hom_del = False
			if categories[1] == "homdel":
				hom_del = True
			i += 1 #position of bar
			if i == 0: #very first bar
				if count > 0:  				
					if hom_del:
						ax.bar(ticks[i] + width, count, color=hom_del_color_mapping[size_class], edgecolor='black')
					else:
						ax.bar(ticks[i] + width, count, color=color_mapping[cnv_class][size_class], edgecolor='black')
					xticks.append(ticks[i] + width)
				else: #count of 0--don't plot anything but put a tick
					xticks.append(ticks[i])
					ax.bar(ticks[i] + width, min_count*0.5, color=color_mapping[cnv_class][size_class], edgecolor='black')
			else:
				if count > 0: 
					if percentage:
						pass
					else:
						if hom_del:
							ax.bar(ticks[i] + width, count, color=hom_del_color_mapping[size_class], edgecolor='black')
						else:
							ax.bar(ticks[i] + width, count, color=color_mapping[cnv_class][size_class], edgecolor='black')
					xticks.append(ticks[i] + width)
				else: #count of 0--don't plot anything but put a tick
					if percentage:
						pass
					else:
						if hom_del:
							ax.bar(ticks[i] + width, count, color=hom_del_color_mapping[size_class], edgecolor='black')
						else:
							ax.bar(ticks[i] + width, count, color=color_mapping[cnv_class][size_class], edgecolor='black')
					xticks.append(ticks[i] + width)
					ax.bar(ticks[i] + width, 2, color='black', edgecolor='black')

		print (xticks)
		print (x_labels * 9 + hom_del_class)
		ax.set_xticks(xticks);
		ax.set_xticklabels(x_labels * 9 + hom_del_class, rotation=90);
		# fig.savefig(output_path + 'test.png', dpi=300, bbox_inches='tight')


		#ADD PATCHES AND TEXT
		patch_height = 0.09
		patch_width = 0.074
		left_edge = 0.151 #placement of left edge of patch
		y_pos = 0.9 #placement of patch on y-axis
		text_height = 0.91		 
		patch_colors = ['maroon', 'darkorange', 'slateblue', 'green', 'maroon', 'darkorange', 'slateblue', 'green', 'slategrey', 'blue']
		categories = het_sub_class + loh_subclass + ['Del']
		ax.add_patch(plt.Rectangle((left_edge, y_pos), patch_width, patch_height, clip_on=False, facecolor=patch_colors[0], transform=plt.gcf().transFigure))
		plt.text(left_edge, text_height, categories[0], fontsize=40, fontname='Times New Roman', fontweight='bold', color='white', transform=plt.gcf().transFigure)
		for i in range(1, 10): #add remaining 9 patches
			left_edge = left_edge + patch_width
			if i < 10: #every patch but the hom del patch
				ax.add_patch(plt.Rectangle((left_edge, y_pos), patch_width, patch_height, clip_on=False, facecolor=patch_colors[i], transform=plt.gcf().transFigure))
				plt.text(left_edge, text_height, categories[i], fontsize=40, fontname='Times New Roman', fontweight='bold', color='white', transform=plt.gcf().transFigure)
				# ax.axvline(x=left_edge, transform=plt.gcf().transFigure)
		#add final patch for hom del
		y_text = 0.095
		ax.add_patch(plt.Rectangle((left_edge, 0.9), patch_width, patch_height*2, clip_on=False, facecolor=patch_colors[0], transform=plt.gcf().transFigure)) #for hom del
		plt.text(left_edge+0.01, 0.9+y_text, "Hom", fontsize=40, fontname='Times New Roman', fontweight='bold', color='white', transform=plt.gcf().transFigure)

		#manually add top level patches(het and LOH) and text inside patches			
		# ax.add_patch(plt.Rectangle((0.149, 0.9+patch_height), 0.3, patch_height, clip_on=False, facecolor='gray', transform=plt.gcf().transFigure))
		# plt.text(0.149 + (patch_width * 2), 0.9+y_text, "Het", fontsize=42, fontname='Times New Roman', fontweight='bold', color='white', transform=plt.gcf().transFigure)
		# ax.add_patch(plt.Rectangle((0.149 + (patch_width * 4), 0.9+patch_height), patch_width*5, patch_height, clip_on=False, facecolor='black', transform=plt.gcf().transFigure))
		# plt.text(0.149 + (patch_width * 6), 0.9+y_text, "LOH", fontsize=42, fontname='Times New Roman', fontweight='bold', color='white', transform=plt.gcf().transFigure)


		#hide y-axis ticks and labels 
		plt.gca().get_yaxis().set_ticks([])
		plt.gca().get_yaxis().set_ticklabels([])

		#ADD SEPARATION LINES

		if percentage:
			plt.ylabel("Percentage", fontsize=35, fontname="Times New Roman", weight = 'bold')
		else:
			plt.ylabel("Frequency", fontsize=35, fontname="Times New Roman", weight = 'bold')

		#SAVE TO PDF
		fig.savefig(output_path + 'test.png', dpi=300, bbox_inches='tight')
		pp.savefig(fig, dpi=300, bbox_inches='tight')
		plt.close()

	def plotCSM(df, output_path):
		matrix = df.iloc[:, 1:].to_numpy().transpose()
		cos_sim = pdist(matrix, 'cosine')		
		sns.set_context("notebook")
		sns.distplot(cos_sim, hist_kws=dict(edgecolor="k", linewidth=2, facecolor='white'), kde=False);
		sns.despine()
		plt.title('Histogram of Sample Pairwise Cosine Similarity Scores');
		plt.xlabel('Cosine Similarity');
		plt.ylabel('Frequency');
		plt.savefig('cosine_similarity_histogram.png', bbox_inches='tight', dpi=600)
	

	df = pd.read_csv(matrix_path, sep='\t')
	#check that matrix is in proper format
	pp = PdfPages(output_path + 'CNV_plot_' + project + '.pdf')

	#each column vector in dataframe contains counts for a specific sample 
	labels = df['classification']
	if aggregate: #one plot for all samples aggregated
		df['total_count'] = df.sum(axis=1)
		counts = list(df['total_count'])
		plot(counts, labels, percentage)
	else: #one plot for each sample all combined in a single pdf		
		for col in df.columns[1:]:			
			counts = list(df[col])
			plot(counts, labels, percentage)
	plotCSM(df, output_path)
		
	pp.close()


if __name__ == "__main__":
	matrix_path = '/Users/azhark/Documents/Alexandrov_Lab/CNV/SigProfilerMatrixGenerator/SigProfilerMatrixGenerator/scripts/CNV.matrix.tsv'
	project = 'ASCAT_test'
	output_path = '/Users/azhark/Documents/Alexandrov_Lab/CNV/plots/'
	plotCNV(matrix_path, output_path, project, percentage=False, aggregate=True)
	




	